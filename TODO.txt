TODO
====
* add index_naive_time_as_local extra property
OK * test indexing and querying the catalog with ical recurrence type
OK * backcheck Products.DateIndex for new developments and get em into here


OBSOLETE
========

* see if timedelta implementation is significantly faster than python-dateutil rrule
  * same functionality can be modeled with rrule
* if not, drop timedelta implementation
    * it's hard to keep both in one package. index's recurdef attribute serves
      two totally differnt masters. checking, which recurrence implementation
      should be used - based on string or int comparisons where always a str
      may be given - is too error prone.
* if you have to keep timedelta implementation, make it configurable via inded management screen.
    (radio buttons)


PERFORMANCE OF RRULESTR vs TIMEDELTA
====================================
timedelta is twice as fast for some tests

>>> from Products.DateRecurringIndex.recurring import RecurConfICal, RecurConfTimeDelta
>>> from Products.DateRecurringIndex.interfaces import IRecurringSequence
>>> from datetime import datetime
>>> import pytz
>>> from Products.DateRecurringIndex.recurring import DSTADJUST, DSTKEEP, DSTAUTO
>>>
>>> import zope.component
>>> from Products.DateRecurringIndex.recurring import recurringSequenceICal, recurringSequenceTimeDelta
>>> zope.component.provideAdapter(recurringSequenceICal)
>>> zope.component.provideAdapter(recurringSequenceTimeDelta)
>>>
>>> at = pytz.timezone('Europe/Vienna')
>>> rulestr = """RRULE:FREQ=MINUTELY;INTERVAL=1"""
>>> start = at.localize(datetime(2010,01,01,0,0))
>>> until = at.localize(datetime(2010,02,02,0,0))
>>>
>>>
>>>
>>> recruleA = RecurConfICal(start, recrule=rulestr, until=until)
>>> recruleB = RecurConfTimeDelta(start, recrule=1, until=until)
>>> import time
>>> ts = time.time()
>>> len(list(IRecurringSequence(recruleA)))
46081
>>> time.time() - ts
2.3700261116027832
>>>
>>> ts = time.time()
>>> len(list(IRecurringSequence(recruleB)))
46081
>>> time.time() - ts
1.6278479099273682
>>>




###################################

size measuerment

>>> import dateutil
>>> from datetime import datetime
>>> rule = dateutil.rrule.rrule(dateutil.rrule.DAILY, count=3, byweekday=(dateutil.rrule.TU,dateutil.rrule.TH), dtstart=datetime(2007,1,1))

>>> from Products.DateRecurringIndex.recurring import RRuleSet, RRule
>>> ruleb = RRuleSet()
>>> ruleb.rrules = [RRule()]
>>> ruleb.rrules[0].freq = 1
>>> ruleb.rrules[0].dstart = '2010-01-01 0:00'
>>> ruleb.rrules[0].count = 3

>>> import sys
>>> sys.getsizeof(rule)
32
>>> sys.getsizeof(ruleb)
28
>>> sys.getsizeof('wtfisthis')
33
>>> rulec = RRuleSet()
>>> sys.getsizeof(rulec)
28

>>> from pympler import asizeof
>>> asizeof.asizeof(rule)
2848
>>> asizeof.asizeof(ruleb)
1192
>>>


import dateutil
from datetime import datetime
rule = dateutil.rrule.rrule(dateutil.rrule.DAILY, count=3, byweekday=(dateutil.rrule.TU,dateutil.rrule.TH), dtstart=datetime(2007,1,1))

from Products.DateRecurringIndex.recurring import RRuleSet, RRule
ruleb = RRuleSet()
ruleb.rrules = [RRule()]
ruleb.rrules[0].freq = 1
ruleb.rrules[0].dstart = '2010-01-01 0:00'
ruleb.rrules[0].count = 3


>>> from dateutil import rrule
>>> rrule.rrule
<class dateutil.rrule.rrule at 0x9b75b9c>
>>> from datetime import datetime
>>> list(rrule.rrule(rrule.WEEKLY, dtstart=datetime.now(), until=datetime(2010, 10, 17)))
[datetime.datetime(2010, 9, 17, 20, 7, 52), datetime.datetime(2010, 9, 24, 20, 7, 52), datetime.datetime(2010, 10, 1, 20, 7, 52), datetime.datetime(2010, 10, 8, 20, 7, 52), datetime.datetime(2010, 10, 15, 20, 7, 52)]

>>> rrule.rruleset
<class dateutil.rrule.rruleset at 0x9b75bfc>
>>> set = rrule.rruleset
>>> set.rdate(datetime(1900,01,01))
>>> set.rrule(rrule.rrule(rrule.WEEKLY, dtstart=datetime.now(), until=datetime(2010, 10, 17)))
>>> set
<dateutil.rrule.rruleset instance at 0x9bc088c>
>>> list(set)
[datetime.datetime(1900, 1, 1, 0, 0), datetime.datetime(2010, 9, 17, 20, 11, 35), datetime.datetime(2010, 9, 24, 20, 11, 35), datetime.datetime(2010, 10, 1, 20, 11, 35), datetime.datetime(2010, 10, 8, 20, 11, 35), datetime.datetime(2010, 10, 15, 20, 11, 35)]
>>> set.rdate(datetime(1900,1,1))
>>> set.rdate(datetime(1900,1,1))
>>> set.rdate(datetime(1900,1,1))
>>> set.rdate(datetime(1900,1,1))
>>> set.rdate(datetime(1900,1,1))
>>> set.rdate(datetime(1900,1,1))
>>> set.rdate(datetime(1900,1,1))
>>> set.rdate(datetime(1900,1,1))
>>> set.rdate(datetime(1900,1,1))
>>> set.rdate(datetime(1900,1,1))
>>> set.rdate(datetime(1900,1,1))
>>> set.rdate(datetime(1900,1,1))
>>> set.rdate(datetime(1900,1,1))
>>> list(set)
[datetime.datetime(1900, 1, 1, 0, 0), datetime.datetime(2010, 9, 17, 20, 11, 35), datetime.datetime(2010, 9, 24, 20, 11, 35), datetime.datetime(2010, 10, 1, 20, 11, 35), datetime.datetime(2010, 10, 8, 20, 11, 35), datetime.datetime(2010, 10, 15, 20, 11, 35)]

>>> from pympler import asizeof
Traceback (most recent call last):
  File "<console>", line 1, in <module>
ImportError: No module named pympler

