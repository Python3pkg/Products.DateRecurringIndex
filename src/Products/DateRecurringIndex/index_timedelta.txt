Initialize the catalog with DateRecurringIndex

    >>> from Products.DateRecurringIndex.tests import DummyExtras
    >>> extra = DummyExtras(recurrence_type='timedelta', start='start',
    ...                     recurdef='delta', until='until', dst='adjust')

    >>> from Products.DateRecurringIndex.index import DateRecurringIndex
    >>> dri = DateRecurringIndex('recurr', extra=extra)

    >>> from Products.ZCatalog.Catalog import Catalog
    >>> self.app.catalog = Catalog()
    >>> self.app.catalog.addIndex('recurr', dri)
    >>> self.app.catalog.addColumn('id')

Let's define some dummy events and catalog them.

    >>> from Products.DateRecurringIndex.tests import DummyEvent
    >>> from datetime import datetime
    >>> import pytz
    >>> cet = pytz.timezone('CET')

    >>> nonr = DummyEvent(id='nonr', start=datetime(2005,01,01,00,00,00,0,cet))
    >>> days = DummyEvent(id='days', start=datetime(2006,02,01,00,00,00,0,cet),
    ...     recurdef=24*60, until=datetime(2006,02,05,00,00,00,0,cet))
    >>> mins = DummyEvent(id='mins', start=datetime(2007,03,01,00,00,00,0,cet),
    ...     recurdef=5, until=datetime(2007,03,05,00,00,00,0,cet))
    >>> dstc = DummyEvent(id='dstc', start=datetime(2008,03,01,00,00,00,0,cet),
    ...     recurdef=60*3, until=datetime(2008,06,01,00,00,00,0,cet))

    >>> self.app.catalog.catalogObject(nonr, 'nonr')
    1
    >>> self.app.catalog.catalogObject(days, 'days')
    1
    >>> self.app.catalog.catalogObject(mins, 'mins')
    1
    >>> self.app.catalog.catalogObject(dstc, 'dstc')
    1


These are the dates indexed:
    >>> from plone.event.recurrence import recurrence_sequence_timedelta

    >>> list(recurrence_sequence_timedelta(start=nonr.start))
    [datetime.datetime(2005, 1, 1, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>)]

    >>> list(recurrence_sequence_timedelta(start=days.start,
    ...                                    delta=days.recurdef, until=days.until))
    [datetime.datetime(2006, 2, 1, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>),
        datetime.datetime(2006, 2, 2, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>),
        datetime.datetime(2006, 2, 3, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>),
        datetime.datetime(2006, 2, 4, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>),
        datetime.datetime(2006, 2, 5, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>)]

    >>> list(recurrence_sequence_timedelta(start=mins.start,delta=mins.recurdef, until=mins.until))[0]
    datetime.datetime(2007, 3, 1, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>)
    >>> list(recurrence_sequence_timedelta(start=mins.start,delta=mins.recurdef, until=mins.until))[-1]
    datetime.datetime(2007, 3, 5, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>)
    >>> len(list(recurrence_sequence_timedelta(start=mins.start,delta=mins.recurdef, until=mins.until)))
    1153

    >>> list(recurrence_sequence_timedelta(start=dstc.start,delta=dstc.recurdef, until=dstc.until))
    [datetime.datetime(2008, 3, 1, 0, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>),
        datetime.datetime(2008, 3, 1, 3, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>),
        datetime.datetime(2008, 3, 1, 6, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>),
        datetime.datetime(2008, 3, 1, 9, 0, tzinfo=<DstTzInfo 'CET' CET+1:00:00 STD>),
        ...
        datetime.datetime(2008, 5, 31, 22, 0, tzinfo=<DstTzInfo 'CET' CEST+2:00:00 DST>)]
    >>> len(list(recurrence_sequence_timedelta(start=dstc.start,delta=dstc.recurdef, until=dstc.until)))
    736

This is what's in the catalog:
TODO: show parts of distinct values of catalog
i guess, timedelta isn't cataloging all events?


Query the nonr (non-recurring)
------------------------------

    >>> cat = self.app.catalog
    >>> query = {
    ...     'recurr': {
    ...         'query': datetime(2005,01,01,00,00,00,0,cet),
    ...         'range': 'max',
    ...     },
    ... }
    >>> res = cat(**query)
    >>> res[0].id
    'nonr'


Query the day (recur every day)
-------------------------------

    >>> query = {
    ...     'recurr': {
    ...         'query': datetime(2006,05,03,00,00,00,0,cet),
    ...         'range': 'max',
    ...     },
    ... }
    >>> res = cat(**query)
    >>> ids = [brain.id for brain in res]
    >>> ids.sort()
    >>> ids
    ['days', 'nonr']


Query the mins (recur every 5 minutes)
--------------------------------------

    >>> query = {
    ...     'recurr': {
    ...         'query': datetime(2007,03,03,00,00,00,0,cet),
    ...         'range': 'max',
    ...     },
    ... }
    >>> res = cat(**query)
    >>> ids = [brain.id for brain in res]
    >>> ids.sort()
    >>> ids
    ['days', 'mins', 'nonr']


Query the dstc (recur over a DST change)
----------------------------------------

    >>> query = {
    ...     'recurr': {
    ...         'query': datetime(2008,03,03,00,00,00,0,cet),
    ...         'range': 'max',
    ...     },
    ... }
    >>> res = cat(**query)
    >>> ids = [brain.id for brain in res]
    >>> ids.sort()
    >>> ids
    ['days', 'dstc', 'mins', 'nonr']

    >>> query = {
    ...     'recurr': {
    ...         'query': datetime(2008,03,03,00,00,00,0,cet),
    ...         'range': 'min',
    ...     },
    ... }
    >>> res = cat(**query)
    >>> ids = [brain.id for brain in res]
    >>> ids.sort()
    >>> ids
    ['dstc']


-------------
Complex tests
-------------

TODO
