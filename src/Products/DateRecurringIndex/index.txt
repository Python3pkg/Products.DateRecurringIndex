==================
DateRecurringIndex
==================

-------------
Overall tests
-------------

Let's define some dummy events and catalog them.

    >>> from Products.DateRecurringIndex.tests import DummyEvent
    >>> from datetime import datetime
    >>> import pytz

    >>> cet = pytz.timezone('CET')
    >>> nonr = DummyEvent(id='nonr', start=datetime(2005,01,01,00,00,00,0,cet))
    >>> days = DummyEvent(id='days', start=datetime(2006,02,01,00,00,00,0,cet),
    ...     recurdef=24*60, until=datetime(2006,02,05,00,00,00,0,cet))
    >>> mins = DummyEvent(id='mins', start=datetime(2007,03,01,00,00,00,0,cet),
    ...     recurdef=5, until=datetime(2007,03,05,00,00,00,0,cet))
    >>> dstc = DummyEvent(id='dstc', start=datetime(2008,03,01,00,00,00,0,cet),
    ...     recurdef=60*3, until=datetime(2008,06,01,00,00,00,0,cet))

    >>> self.app.catalog.catalogObject(nonr, 'nonr')
    1
    >>> self.app.catalog.catalogObject(days, 'days')
    1
    >>> self.app.catalog.catalogObject(mins, 'mins')
    1
    >>> self.app.catalog.catalogObject(dstc, 'dstc')
    1


Query the nonr (non-recurring)
------------------------------

    >>> cat = self.app.catalog
    >>> query = {
    ...     'recurr': {
    ...         'query': datetime(2005,01,01,00,00,00,0,cet),
    ...         'range': 'max',
    ...     },
    ... }
    >>> res = cat(**query)
    >>> res[0].id
    'nonr'


Query the day (recur every day)
-------------------------------

    >>> query = {
    ...     'recurr': {
    ...         'query': datetime(2006,05,03,00,00,00,0,cet),
    ...         'range': 'max',
    ...     },
    ... }
    >>> res = cat(**query)
    >>> ids = [brain.id for brain in res]
    >>> ids.sort()
    >>> ids
    ['days', 'nonr']


Query the mins (recur every 5 minutes)
--------------------------------------

    >>> query = {
    ...     'recurr': {
    ...         'query': datetime(2007,03,03,00,00,00,0,cet),
    ...         'range': 'max',
    ...     },
    ... }
    >>> res = cat(**query)
    >>> ids = [brain.id for brain in res]
    >>> ids.sort()
    >>> ids
    ['days', 'mins', 'nonr']


Query the dstc (recur over a DST change)
----------------------------------------

    >>> query = {
    ...     'recurr': {
    ...         'query': datetime(2008,03,03,00,00,00,0,cet),
    ...         'range': 'max',
    ...     },
    ... }
    >>> res = cat(**query)
    >>> ids = [brain.id for brain in res]
    >>> ids.sort()
    >>> ids
    ['days', 'dstc', 'mins', 'nonr']

    >>> query = {
    ...     'recurr': {
    ...         'query': datetime(2008,03,03,00,00,00,0,cet),
    ...         'range': 'min',
    ...     },
    ... }
    >>> res = cat(**query)
    >>> ids = [brain.id for brain in res]
    >>> ids.sort()
    >>> ids
    ['dstc']


-------------
Complex tests
-------------

TODO
